// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: run.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrogClient is the client API for Crog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrogClient interface {
	List(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error)
	Run(ctx context.Context, in *RunActionRequest, opts ...grpc.CallOption) (*RunActionResponse, error)
}

type crogClient struct {
	cc grpc.ClientConnInterface
}

func NewCrogClient(cc grpc.ClientConnInterface) CrogClient {
	return &crogClient{cc}
}

func (c *crogClient) List(ctx context.Context, in *ListActionsRequest, opts ...grpc.CallOption) (*ListActionsResponse, error) {
	out := new(ListActionsResponse)
	err := c.cc.Invoke(ctx, "/Crog/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crogClient) Run(ctx context.Context, in *RunActionRequest, opts ...grpc.CallOption) (*RunActionResponse, error) {
	out := new(RunActionResponse)
	err := c.cc.Invoke(ctx, "/Crog/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrogServer is the server API for Crog service.
// All implementations must embed UnimplementedCrogServer
// for forward compatibility
type CrogServer interface {
	List(context.Context, *ListActionsRequest) (*ListActionsResponse, error)
	Run(context.Context, *RunActionRequest) (*RunActionResponse, error)
	mustEmbedUnimplementedCrogServer()
}

// UnimplementedCrogServer must be embedded to have forward compatible implementations.
type UnimplementedCrogServer struct {
}

func (UnimplementedCrogServer) List(context.Context, *ListActionsRequest) (*ListActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCrogServer) Run(context.Context, *RunActionRequest) (*RunActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedCrogServer) mustEmbedUnimplementedCrogServer() {}

// UnsafeCrogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrogServer will
// result in compilation errors.
type UnsafeCrogServer interface {
	mustEmbedUnimplementedCrogServer()
}

func RegisterCrogServer(s grpc.ServiceRegistrar, srv CrogServer) {
	s.RegisterService(&Crog_ServiceDesc, srv)
}

func _Crog_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrogServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Crog/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrogServer).List(ctx, req.(*ListActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crog_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrogServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Crog/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrogServer).Run(ctx, req.(*RunActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Crog_ServiceDesc is the grpc.ServiceDesc for Crog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Crog",
	HandlerType: (*CrogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Crog_List_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _Crog_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "run.proto",
}
